parameters:
- name: release
  type: boolean
  default: False
- name: documentation_artefact_path
  type: string
  default: '$(Build.StagingDirectory)/documentation'
- name: documentation_repo_path
  type: string
  default: '$(Build.StagingDirectory)/git'
- name: image
  type: string
  default: ''
- name: conda_label
  type: string
  default: 'test'
- name: package_list
  type: object
  default: []
- name: publish_documentation
  type: boolean
  default: True

stages:
  - stage: 'deploy'
    displayName: 'Deployment'

    jobs:
      - job: 'deploy_docs_and_packages'
        displayName: 'Deploy docs and packages'
        pool:
          vmImage: ${{ parameters.image }}
        variables:
          - group: tokens
        steps:
          - bash: |
              echo "##vso[task.prependpath]$CONDA/bin"
              echo "##vso[task.setvariable variable=conda_dir]$CONDA"
            displayName: 'Configure Conda'
          - bash: |
              set -ex
              conda --version
              conda install -c conda-forge --yes anaconda-client
              conda config --set always_yes yes --set changeps1 no
            displayName: 'Install anaconda-client'
          - ${{ each package in parameters.package_list }}:
            - task: DownloadBuildArtifacts@0
              condition: ${{ parameters.publish_documentation }}
              inputs:
                buildType: 'current'
                specificBuildWithTriggering: true
                downloadType: 'single'
                artifactName: ${{ package.Key }}
                downloadPath: '$(Build.StagingDirectory)/packages'
              displayName: 'Retrieve built conda package'
            - bash: |
                anaconda --token "$ANACONDA_TOKEN" upload --user scipp --label ${{ parameters.conda_label }} '$(Build.StagingDirectory)/packages/${{ package.Key }}/'scipp-*.tar.bz2
              env:
                ANACONDA_TOKEN: $(anaconda_token_secret)
              displayName: 'Deploy ${{ package.Key }}'

          - task: DownloadBuildArtifacts@0
            condition: ${{ parameters.publish_documentation }}
            inputs:
              buildType: 'current'
              specificBuildWithTriggering: true
              downloadType: 'single'
              artifactName: 'documentation'
              downloadPath: '$(Build.StagingDirectory)'
            displayName: 'Retrieve built documentation'
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: '|1|RUYRgOQOM1Elf2P4avx8YNBvtI8=|QKQU0rsDA0sdvfZeayvuQ3l7XjE= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
              sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQD1k29WMh5uvP5TRihav1ilNbm3Z/KXvoBA9q3YmNkSKFOubvb/y+Tc2S6vqVWxpUDC0CWFyFdUp+WUGy9Cx2aQ0DzmJWUoXJz5woS48e2o/091HpSyvSfYXikBVpTpxJFOYB4lCDclsz4jG1HfuHlf763ajp0EBoTeJspT2kiIdXD47nSpHt/vl47PxwVLgTPVYT1fbwBXwmPNldupph0PkP+fV3uw+DJkXzIR5Uo+3iJu7wrZTKx4W4E4r1bInHjLd4/XP/MbaX0ds47Il27yACZSdrSBZg2Q4E8nVkZUO1VA1sWrcpI39V4Zh7e+Ab9MeUtLa6hR5pSp54Eg0HxnHwDkKpyQsCApueUw7FJ9vZiIKZRqRRhK6mEpQQ+jl+a5pyPH8/20un7C20FUu5CqUFOrY1gncsoyiYevsLumCRu7Nh99oFbAQzxydiNbtpXXsDA6ZWO5BLLA+rvftoQqFPjvnM7nrArg3ATYyZXlK904OmUwWcAs5BPJlG8Rv1c/wrJzAW0RsZqanNmvsgOVrHTLUHhDTxKmWBzQwAomOqOddx86scCU0Bqr3UPRhf8deSIajIa30wADbVRLrwkp0BHBdY5lukzhwc3swBIfu4aiikIHe+Mj99oh17F5X5za7Iyu2+Gv5oSf7gZR43bzSz0dW6XTfcCrRR9H6OHXew=='
              sshKeySecureFile: 'gh_pages_deploy_key'
            displayName: 'Add GitHub Pages deploy key'
          - bash: |
              set -ex
              # Publishing documentation involves a Git commit, this sets the identity for that commit
              git config --global user.name 'The Great Documentation Generation Entity'
              git config --global user.email 'nobody@localhost'
            displayName: 'Git config'
          - bash: |
              set -ex
              git clone git@github.com:scipp/scipp.github.io ${{ parameters.documentation_repo_path }}
            displayName: 'Clone documentation repository'
          - bash: |
              set -ex
              cd ${{ parameters.documentation_repo_path }}
              # Stage removal of everything
              git rm -rf .
              git status
              # Unstage deletion of and recover "release" directory
              git reset -- release || true
              git checkout -- release || true
              git status
            displayName: 'Remove old documentation, keeping releases'
          - bash: |
              set -ex
              cd ${{ parameters.documentation_repo_path }}
              # The .nojekyll file is used to turn off GitHub Pages building
              touch .nojekyll
              rsync -av "${{ parameters.documentation_artefact_path }}/" .
              git add .
              git status
            displayName: 'Copy new documentation'
          - bash: |
              set -ex
              release_docs_dir="release/$(git describe --tags)"
              cd ${{ parameters.documentation_repo_path }}
              mkdir -p "$release_docs_dir"
              rsync -av "${{ parameters.documentation_artefact_path }}/" "$release_docs_dir"
              git add .
              git status
            condition: and(succeeded(), ${{ parameters.release }})
            displayName: 'Copy new documentation for release'
          - bash: |
              set -ex
              cd ${{ parameters.documentation_repo_path }}
              # Amend last commit to keep repository size down
              git commit --amend --date="$(date)" --message='Auto commit from CI'
              git status
              git push --force-with-lease
              git status
            displayName: 'Push to GitHub Pages'
